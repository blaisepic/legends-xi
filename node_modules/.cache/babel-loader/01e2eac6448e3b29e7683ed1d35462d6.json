{"ast":null,"code":"var _jsxFileName = \"/home/blaise/the_odin_project/legends-xi/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport './style.css';\nimport React, { Component, useState, useRef, useEffect } from 'react'; // import ReactScrollableList from './components/scrollable';\n\nimport './Data';\nimport { listVals } from './Data';\nimport { listKeys } from './Data';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BasicTable from './components/BasicTable';\nimport FilteringTable from './components/FilteringTable';\nimport SortingTable from './components/SortingTable';\nimport MOCK_DATA from \"./components/MOCK.DATA.json\";\nimport AlertDialog from './components/Dialog'; //for access, make the div's #id the key in the listItems dict.\n// use that key to access the item somehow..\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.handleCallback = childData => {\n      this.setState({\n        jerseyColor: childData\n      });\n    };\n\n    this.handleCallbackPlayer = (playerName, playerPos) => {\n      this.setState({\n        currPlayer: playerName,\n        currPlayerPos: playerPos\n      });\n      console.log(\"in Container:\");\n      console.log(playerName);\n      console.log(playerPos);\n    };\n\n    this.handleCallbackBudget = childData => {\n      this.setState({\n        budget: childData\n      });\n    };\n\n    this.state = {\n      jerseyColor: \"#000000\",\n      currPlayer: \"\",\n      currPlayerPos: \"\",\n      budget: 100\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(TeamInfo, {\n        parentCallback: this.handleCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TeamData, {\n        parentCallback: this.handleCallbackBudget\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        parentPlayerName: this.state.currPLayer,\n        parentPlayerPos: this.state.currPlayerPos,\n        parentData: this.state.jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlayerData, {\n        parentCallback: this.handleCallbackPlayer,\n        parentData: this.state.budget\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass TeamInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.setState({\n        jerseyColor: childData\n      });\n      this.props.parentCallback(childData);\n      console.log(\"in TeamInfo: \");\n      console.log(childData);\n    };\n\n    this.state = {\n      jerseyColor: \"\"\n    };\n  } //TODO: when this is called, pass the jerseyColor to the parent so we can\n  // apply it the circles\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"team-info-container\",\n      children: [/*#__PURE__*/_jsxDEV(TeamInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(JerseyColor, {\n        parentCallback: this.handleCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass TeamData extends Component {\n  constructor() {\n    super();\n\n    this.handleCallback = childData => {\n      this.props.parentCallback(childData);\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: 'salmon'\n      },\n      className: \"team-data-container\",\n      children: [/*#__PURE__*/_jsxDEV(PlayersSelected, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Budget, {\n        parentCallback: this.handleCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass PlayerData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = (playerName, playerPos) => {\n      this.props.parentCallback(playerName, playerPos);\n    };\n\n    this.componentDidUpdate = prevProps => {\n      if (this.props.parentData !== prevProps.parentData) {\n        this.setState({\n          budget: this.props.parentData\n        });\n      }\n    };\n\n    this.state = {\n      budget: 100\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-data-container\",\n      children: /*#__PURE__*/_jsxDEV(ScrollList, {\n        parentCallback: this.handleCallback,\n        parentData: this.state.budget\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass FreezePane extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = childData => {\n      this.props.parentCallback(childData);\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"freeze-pane\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"freeze-pane-item\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"freeze-pane-item\",\n        children: /*#__PURE__*/_jsxDEV(PosFilter, {\n          parentCallback: this.handleCallback,\n          className: \"freeze-pane-item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"freeze-pane-item\",\n        children: \"Price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  }\n\n} // TODO: \n// pass the player: SortingTable ^ ScrollList; ScrollList ^ player-data-container; player-data-container ^ App; App => Field; Field => Circle\n\n\nclass ScrollList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCallback = (childDataName, childDataPrice) => {\n      this.setState({\n        currPlayer: childDataName,\n        currPlayerPrice: childDataPrice\n      });\n    };\n\n    this.componentDidUpdate = prevProps => {\n      if (this.props.parentData !== prevProps.parentData) {\n        this.setState({\n          budget: this.props.parentData\n        });\n      }\n    };\n\n    this.addPlayer = (playerName, playerPos) => {\n      this.props.parentCallback(playerName, playerPos);\n    };\n\n    this.state = {\n      currPlayer: \"\",\n      currPlayerPrice: 0,\n      currPlayerPos: \"\",\n      budget: 100\n    };\n  }\n\n  render() {\n    let count = 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroller\",\n      children: [/*#__PURE__*/_jsxDEV(AlertDialog, {\n        addPlayerCallback: this.addPlayer,\n        playerName: this.state.currPlayer,\n        playerPrice: this.state.currPlayerPrice,\n        budget: this.state.budget,\n        className: \"dialog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SortingTable, {\n        parentCallback: this.handleCallback,\n        id: \"table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass PosFilter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = e => {\n      console.log(e.target.outerText);\n      this.setState({\n        filterByPos: e.target.outerText\n      });\n      this.props.parentCallback(e.target.outerText);\n    };\n\n    this.state = {\n      filterByPos: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DropdownButton, {\n      id: \"dropdown-basic-button\",\n      title: \"Pos\",\n      children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n        href: \"#/action-1\",\n        onClick: this.handleClick,\n        children: \"F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n        href: \"#/action-2\",\n        onClick: this.handleClick,\n        children: \"MID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n        href: \"#/action-3\",\n        children: \"DEF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n        href: \"#/action-3\",\n        children: \"GK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nclass TeamInput extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      this.setState({\n        text: e.target.value\n      });\n    };\n\n    this.state = {\n      text: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"teamInput\",\n        children: \"Team name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"teamInput\",\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this);\n  }\n\n} // ex value: red = '#ff0000'\n\n\nclass JerseyColor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        jerseyColor: e.target.value\n      });\n      this.props.parentCallback(this.state.jerseyColor);\n      console.log(\"in JerseyColor: \");\n      console.log(this.state.jerseyColor);\n    };\n\n    this.state = {\n      jerseyColor: \"\"\n    };\n  } //TODO: only handleChange when the user has left...\n  //not when they are dragging the color wheel around\n  // a transition effect for the 'jerseys' (circle) with a delay\n  // should resolve this\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"jerseyColor\",\n        children: \"Jersey Color:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        id: \"jerseyColor\",\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst Field = props => {\n  _s();\n\n  const [jerseyColor, setJerseyColor] = useState(props.parentData);\n  const [currPlayer, setCurrPlayer] = useState(props.parentPlayerName);\n  const [currPlayerPos, setCurrPlayerPos] = useState(props.parentPlayerPos);\n  useEffect(() => {\n    setJerseyColor(props.parentData);\n  }, props.parentData);\n  useEffect(() => {\n    setCurrPlayer(props.parentPlayerName);\n    setCurrPlayerPos(props.parentPlayerPos);\n    addPlayer(props.parentPlayerName, props.parentPlayerPos);\n    console.log(\"use effect is properly working...\");\n  }, props.parentPlayerName); // componentDidUpdate(prevProps) {\n  //   if(this.props.parentData !== prevProps.parentData){\n  //     this.setJerseyColor(this.props.parentData);\n  //   }\n  //   if(this.props.parentPlayerName !== prevProps.parentPlayerName){\n  //     this.setCurrPlayer(this.props.parentPlayerName);\n  //     this.setCurrPlayerPos(this.props.parentPlayerPos);\n  //     addPlayer(this.props.parentPlayerName, this.props.parentPlayerPos);\n  //   }\n  // }\n  //call addPlayer in useEffect when currPlayer changes\n\n  function addPlayer(name, pos) {\n    let newPos = \"\";\n    if (pos == 'GK') newPos = \"goalkeeper\";\n    if (pos == 'D') newPos = 'defender';\n    if (pos == 'M') newPos = 'midfielder';\n    if (pos == 'F') newPos = 'forward'; //querySelectorAll on newPos\n    //loop thru the returned array of elements checking for each elements 'filled' status\n    // let elements = document.querySelectorAll(`.${newPos}`);\n\n    let elements = document.querySelectorAll('.defender');\n    elements.forEach(e => {\n      console.log(e);\n    });\n  } // 1. check if player already, if so, don't do anything\n  // 2. if not current player (else), and if positions are available, then add him to the 1st available circle \n  // 3. must return adjusted budget if player is successfully added\n  // MUST DO: figure out where to place add function. I need to access the filled property to determine if a circle can be occupied or if I must check the next\n  // MUST DO: use position to check whether we should be calling into gk, def, mid, or forward\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"field\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gk-flex flex-box\",\n      children: /*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle goalkeeper\",\n        parentData: jerseyColor,\n        filled: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"defense flex-box\",\n      children: [/*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle defender\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle defender\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle defender\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"midfield flex-box\",\n      children: [/*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle midfielder\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle midfielder\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle midfielder\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle midfielder\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"offense flex-box\",\n      children: [/*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle forward\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle forward\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Circle, {\n        classNames: \"circle forward\",\n        parentData: jerseyColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 7\n  }, this);\n}; // class Field extends Component {\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       jerseyColor: this.props.parentData,\n//       currPlayer: this.props.parentPlayerName,\n//       currPlayerPos: this.props.parentPlayerPos\n//     };\n//   }\n//   componentDidUpdate(prevProps) {\n//     if(this.props.parentData !== prevProps.parentData){\n//       this.setState({jerseyColor: this.props.parentData})\n//     }\n//     if(this.props.parentPlayerName !== prevProps.parentPlayerName){\n//       this.setState({currPlayer: this.props.parentPlayerName,\n//       currPlayerPos: this.props.parentPlayerPos});\n//       addPlayer(this.props.parentPlayerName, this.props.parentPlayerPos);\n//     }\n//   }\n//   //check for: player already in the lineup, available positions\n//   //once checks are completed, how to communicate with the right circles? how to loop thru the circles?\n//   addPlayer(name, pos) {\n//     let newPos = \"\";\n//     if(pos == 'GK') newPos = \"goalkeeper\";\n//     if(pos == 'D') newPos = 'defender';\n//     if(pos == 'M') newPos = 'midfielder';\n//     if(pos == 'F') newPos = 'forward';\n//   }\n//   // 1. check if player already, if so, don't do anything\n//   // 2. if not current player (else), and if positions are available, then add him to the 1st available circle \n//   // 3. must return adjusted budget if player is successfully added\n//   // MUST DO: figure out where to place add function. I need to access the filled property to determine if a circle can be occupied or if I must check the next\n//   // MUST DO: use position to check whether we should be calling into gk, def, mid, or forward\n//   render() {\n//     const gkRef = useRef();\n//     const dRef = useRef();\n//     const mRef = useRef();\n//     const fRef = useRef();\n//     return(\n//         <div className=\"field\">\n//           <div className=\"gk-flex flex-box\">\n//             <Circle ref={gkRef} onClick={console.log(\"hello bitch\")} classNames=\"circle goalkeeper\" \n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//           </div>\n//           <div className=\"defense flex-box\">\n//             <Circle classNames=\"circle defender\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle defender\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle defender\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//           </div>\n//           <div className=\"midfield flex-box\">\n//             <Circle classNames=\"circle midfielder\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle midfielder\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle midfielder\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle midfielder\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//           </div>\n//           <div className=\"offense flex-box\">\n//             <Circle classNames=\"circle forward\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle forward\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle forward\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//           </div>\n//         </div>\n//     );\n//   }\n// }\n\n\n_s(Field, \"STGcBEcTUF/x46tHosBxQC/+1iI=\");\n\n_c = Field;\n\nconst Circle = props => {\n  _s2();\n\n  const [jerseyColor, setJerseyColor] = useState(props.parentData);\n  const [filled, setFilled] = useState(false);\n  const [playerName, setPlayerName] = useState(\"\");\n  useEffect(() => {\n    setJerseyColor(props.parentData);\n  }, props.parentData);\n  useEffect(() => {});\n  const thisRef = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: thisRef,\n      className: props.classNames,\n      style: {\n        backgroundColor: jerseyColor\n      },\n      onClick: () => console.log(thisRef)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"circleText\",\n      children: playerName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 515,\n    columnNumber: 5\n  }, this);\n}; // class Circle extends Component {\n//   constructor(props){\n//     super(props);\n//     this.state = {\n//       jerseyColor: this.props.parentData,\n//       filled: false,\n//       playerName: \"\"\n//     };\n//   }\n//   addPlayer = (name, pos) => {\n//     if(!this.state.filled){\n//       this.setState({filled: true,\n//       playerName: name});\n//     }\n//   }\n//   //also check for playerName and playerPos change (just check for filled)\n//   componentDidUpdate(prevProps){\n//     if(this.props.parentData !== prevProps.parentData) {\n//       this.setState({jerseyColor: this.props.parentData});\n//     }\n//     if(this.props.parentDataFilled != prevProps.parentDataFilled){\n//       this.setState({filled: false});\n//       //set the state of the playername and playerPos as well\n//     }\n//   }\n//   render() {\n//     const thisRef = useRef();\n//     return(\n//       <div>\n//         <div\n//         ref = {thisRef} \n//         className={this.props.classNames}\n//         style={{ backgroundColor: this.state.jerseyColor }}\n//         onClick={() => console.log(\"hello this is the circle I'm clicking..\")}\n//         ></div>\n//         <span className=\"circleText\">{this.state.playerName}</span>\n//       </div>\n//     );\n//   }\n// }\n//TODO: where should the increment() go?\n\n\n_s2(Circle, \"z1neCGsFmYU5SRGHzeDZijFdx2s=\");\n\n_c2 = Circle;\n\nclass PlayersSelected extends Component {\n  constructor() {\n    super();\n    this.state = {\n      playersOnTeam: 0\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"players-selected\",\n      children: [\"Players selected: \", this.state.playersOnTeam, \"/11\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Budget extends Component {\n  constructor() {\n    super();\n    this.state = {\n      budget: 100\n    };\n  } // TODO: componentDidUpdate()\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"budget\",\n      onChange: () => this.props.parentCallback(this.state.budget),\n      children: [\"Budget: \", this.state.budget, \"m\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Field\");\n$RefreshReg$(_c2, \"Circle\");","map":{"version":3,"sources":["/home/blaise/the_odin_project/legends-xi/src/App.js"],"names":["React","Component","useState","useRef","useEffect","listVals","listKeys","DropdownButton","Dropdown","BasicTable","FilteringTable","SortingTable","MOCK_DATA","AlertDialog","App","constructor","handleCallback","childData","setState","jerseyColor","handleCallbackPlayer","playerName","playerPos","currPlayer","currPlayerPos","console","log","handleCallbackBudget","budget","state","render","currPLayer","TeamInfo","props","parentCallback","TeamData","backgroundColor","PlayerData","componentDidUpdate","prevProps","parentData","FreezePane","ScrollList","childDataName","childDataPrice","currPlayerPrice","addPlayer","count","PosFilter","handleClick","e","target","outerText","filterByPos","TeamInput","handleChange","text","value","JerseyColor","Field","setJerseyColor","setCurrPlayer","parentPlayerName","setCurrPlayerPos","parentPlayerPos","name","pos","newPos","elements","document","querySelectorAll","forEach","Circle","filled","setFilled","setPlayerName","thisRef","classNames","PlayersSelected","playersOnTeam","Budget"],"mappings":"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","sourcesContent":["import './style.css';\nimport React, {Component, useState, useRef, useEffect} from 'react';\n// import ReactScrollableList from './components/scrollable';\nimport './Data';\nimport {listVals} from './Data';\nimport {listKeys} from './Data';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport BasicTable from './components/BasicTable';\nimport FilteringTable from './components/FilteringTable';\nimport SortingTable from './components/SortingTable';\nimport MOCK_DATA from \"./components/MOCK.DATA.json\";\nimport AlertDialog from './components/Dialog'\n\n//for access, make the div's #id the key in the listItems dict.\n// use that key to access the item somehow..\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      jerseyColor: \"#000000\",\n      currPlayer: \"\",\n      currPlayerPos: \"\",\n      budget: 100\n    };\n  }\n\n  handleCallback = (childData) => {\n    this.setState({jerseyColor: childData})\n  }\n\n  handleCallbackPlayer = (playerName, playerPos) => {\n    this.setState({currPlayer: playerName, \n    currPlayerPos: playerPos});\n    console.log(\"in Container:\");\n    console.log(playerName);\n    console.log(playerPos)\n  }\n\n  handleCallbackBudget = (childData) => {\n    this.setState({budget: childData});\n  }\n\n  render() {\n    return (\n      <div className=\"container\" id=\"container\">\n        <TeamInfo parentCallback = {this.handleCallback}></TeamInfo>\n        <TeamData parentCallback = {this.handleCallbackBudget}></TeamData>\n        <Field parentPlayerName = {this.state.currPLayer} parentPlayerPos = {this.state.currPlayerPos} parentData = {this.state.jerseyColor}></Field>\n        <PlayerData parentCallback={this.handleCallbackPlayer} parentData={this.state.budget}></PlayerData>\n\n      </div>\n    );\n  }\n}\n\nclass TeamInfo extends Component{\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      jerseyColor: \"\",\n    };\n  }\n\n  //TODO: when this is called, pass the jerseyColor to the parent so we can\n  // apply it the circles\n  handleCallback = (childData) => {\n    this.setState({jerseyColor: childData})\n    this.props.parentCallback(childData);\n\n    console.log(\"in TeamInfo: \");\n    console.log(childData);\n  }\n\n  render() {\n    return(\n      <div className=\"team-info-container\">\n          <TeamInput></TeamInput>\n          <JerseyColor parentCallback = {this.handleCallback}></JerseyColor>\n      </div>\n    )\n  }\n}\n\nclass TeamData extends Component{\n  constructor() {\n    super();\n\n    this.state = {\n\n    };\n  }\n\n  handleCallback = (childData) => {\n    this.props.parentCallback(childData);\n  }\n\n  render() {\n    return(\n      <div \n        style={{ backgroundColor: 'salmon' }}\n        className=\"team-data-container\">\n          <PlayersSelected></PlayersSelected>\n          <Budget parentCallback = {this.handleCallback}></Budget>\n      </div>\n    )\n  }\n}\n\nclass PlayerData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      budget: 100,\n    };\n  }\n\n  handleCallback = (playerName, playerPos) => {\n    this.props.parentCallback(playerName, playerPos);\n  }\n\n  componentDidUpdate = (prevProps) => {\n    if(this.props.parentData !== prevProps.parentData){\n      this.setState({budget: this.props.parentData});\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"player-data-container\">\n        {/* <FreezePane parentCallback = {this.handleCallback}></FreezePane> */}\n        <ScrollList parentCallback={this.handleCallback} parentData={this.state.budget}></ScrollList>\n      </div>\n    );\n  }\n}\n\nclass FreezePane extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      \n    }\n  }\n\n  handleCallback = (childData) => {\n    this.props.parentCallback(childData)\n  }\n\n  render() {\n    return(\n      <div className=\"freeze-pane\">\n        <div className=\"freeze-pane-item\">Name</div>\n        <div className=\"freeze-pane-item\">\n          <PosFilter parentCallback = {this.handleCallback} className=\"freeze-pane-item\"></PosFilter>\n        </div>\n        <div className=\"freeze-pane-item\">Price</div>\n      </div>\n    );\n  }\n}\n// TODO: \n  // pass the player: SortingTable ^ ScrollList; ScrollList ^ player-data-container; player-data-container ^ App; App => Field; Field => Circle\nclass ScrollList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currPlayer: \"\",\n      currPlayerPrice: 0,\n      currPlayerPos: \"\",\n      budget: 100,\n    }\n  }\n\n  handleCallback = (childDataName, childDataPrice) => {\n    this.setState({currPlayer: childDataName,\n    currPlayerPrice: childDataPrice}); \n  }\n\n  componentDidUpdate = (prevProps) => {\n    if(this.props.parentData !== prevProps.parentData){\n      this.setState({budget: this.props.parentData});\n    }\n  }\n\n  addPlayer = (playerName, playerPos) => {\n    this.props.parentCallback(playerName, playerPos);\n  }\n\n  render() {\n    let count = 0;\n    return(\n      <div className=\"scroller\">\n        <AlertDialog addPlayerCallback = {this.addPlayer} playerName = {this.state.currPlayer} \n        playerPrice = {this.state.currPlayerPrice} budget={this.state.budget} className=\"dialog\"></AlertDialog>\n        <SortingTable parentCallback = {this.handleCallback} id=\"table\"></SortingTable>\n      </div>\n\n\n\n    );\n  }\n}\n\nclass PosFilter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filterByPos: \"\",\n    };\n  }\n\n  handleClick = (e) => {\n    console.log(e.target.outerText);\n    this.setState({filterByPos: e.target.outerText});\n    this.props.parentCallback(e.target.outerText);\n    \n  }\n\n  render() {\n    return(\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Pos\">\n          <Dropdown.Item href=\"#/action-1\" onClick={this.handleClick}>F</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-2\" onClick={this.handleClick}>MID</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-3\">DEF</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-3\">GK</Dropdown.Item>\n        </DropdownButton>\n    );\n  }\n}\n\nclass TeamInput extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      text: \"\",\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({text:e.target.value})\n  }\n\n  render() {\n    return(\n      <div>\n        <label for=\"teamInput\">Team name:</label>\n        <input type=\"text\" id=\"teamInput\" onChange= {this.handleChange}></input>\n      </div>\n    );\n  }\n}\n\n// ex value: red = '#ff0000'\nclass JerseyColor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      jerseyColor: \"\",\n    };\n  }\n\n  //TODO: only handleChange when the user has left...\n  //not when they are dragging the color wheel around\n  // a transition effect for the 'jerseys' (circle) with a delay\n  // should resolve this\n  handleChange = (e) => {\n    this.setState({jerseyColor: e.target.value});\n    this.props.parentCallback(this.state.jerseyColor);\n    console.log(\"in JerseyColor: \");\n    console.log(this.state.jerseyColor)\n  }\n\n  render() {\n    return(\n      <div>\n        <label for=\"jerseyColor\">Jersey Color:</label>\n        <input type=\"color\" id=\"jerseyColor\"\n        onChange= {this.handleChange}></input>\n      </div>\n    );\n  }\n}\n\nconst Field = (props) => {\n  const [jerseyColor, setJerseyColor] = useState(props.parentData);\n  const [currPlayer, setCurrPlayer] = useState(props.parentPlayerName);\n  const [currPlayerPos, setCurrPlayerPos] = useState(props.parentPlayerPos);\n\n  useEffect(() => {\n    setJerseyColor(props.parentData);\n  }, props.parentData);\n\n  useEffect(() => {\n    setCurrPlayer(props.parentPlayerName);\n    setCurrPlayerPos(props.parentPlayerPos);\n    addPlayer(props.parentPlayerName, props.parentPlayerPos);\n    console.log(\"use effect is properly working...\");\n  }, props.parentPlayerName);\n\n  // componentDidUpdate(prevProps) {\n  //   if(this.props.parentData !== prevProps.parentData){\n  //     this.setJerseyColor(this.props.parentData);\n  //   }\n\n  //   if(this.props.parentPlayerName !== prevProps.parentPlayerName){\n  //     this.setCurrPlayer(this.props.parentPlayerName);\n  //     this.setCurrPlayerPos(this.props.parentPlayerPos);\n  //     addPlayer(this.props.parentPlayerName, this.props.parentPlayerPos);\n  //   }\n  // }\n\n  //call addPlayer in useEffect when currPlayer changes\n  function addPlayer(name, pos) {\n    let newPos = \"\";\n    if(pos == 'GK') newPos = \"goalkeeper\";\n    if(pos == 'D') newPos = 'defender';\n    if(pos == 'M') newPos = 'midfielder';\n    if(pos == 'F') newPos = 'forward';\n\n    //querySelectorAll on newPos\n    //loop thru the returned array of elements checking for each elements 'filled' status\n    // let elements = document.querySelectorAll(`.${newPos}`);\n    let elements = document.querySelectorAll('.defender');\n    elements.forEach(e => {\n      console.log(e);\n    });\n\n  }\n\n  // 1. check if player already, if so, don't do anything\n  // 2. if not current player (else), and if positions are available, then add him to the 1st available circle \n  // 3. must return adjusted budget if player is successfully added\n  // MUST DO: figure out where to place add function. I need to access the filled property to determine if a circle can be occupied or if I must check the next\n  // MUST DO: use position to check whether we should be calling into gk, def, mid, or forward\n\n  return(\n      <div className=\"field\">\n        \n        <div className=\"gk-flex flex-box\">\n          <Circle classNames=\"circle goalkeeper\" \n          parentData = {jerseyColor}\n          filled = {false}\n          ></Circle>\n        </div>\n\n        <div className=\"defense flex-box\">\n          <Circle classNames=\"circle defender\"\n          parentData = {jerseyColor}\n          ></Circle>\n          <Circle classNames=\"circle defender\"\n          parentData = {jerseyColor}\n          ></Circle>\n          <Circle classNames=\"circle defender\"\n          parentData = {jerseyColor}\n          ></Circle>\n        </div>\n\n        <div className=\"midfield flex-box\">\n          <Circle classNames=\"circle midfielder\"\n          parentData = {jerseyColor}\n          ></Circle>\n          <Circle classNames=\"circle midfielder\"\n          parentData = {jerseyColor}\n          ></Circle>\n          <Circle classNames=\"circle midfielder\"\n          parentData = {jerseyColor}\n          ></Circle>\n          <Circle classNames=\"circle midfielder\"\n          parentData = {jerseyColor}\n          ></Circle>\n        </div>\n\n        <div className=\"offense flex-box\">\n          <Circle classNames=\"circle forward\"\n          parentData = {jerseyColor}\n          ></Circle>\n          <Circle classNames=\"circle forward\"\n          parentData = {jerseyColor}\n          ></Circle>\n          <Circle classNames=\"circle forward\"\n          parentData = {jerseyColor}\n          ></Circle>\n        </div>\n\n      </div>\n  );\n}\n\n// class Field extends Component {\n//   constructor(props){\n//     super(props);\n\n//     this.state = {\n//       jerseyColor: this.props.parentData,\n//       currPlayer: this.props.parentPlayerName,\n//       currPlayerPos: this.props.parentPlayerPos\n//     };\n//   }\n\n//   componentDidUpdate(prevProps) {\n//     if(this.props.parentData !== prevProps.parentData){\n//       this.setState({jerseyColor: this.props.parentData})\n//     }\n\n//     if(this.props.parentPlayerName !== prevProps.parentPlayerName){\n//       this.setState({currPlayer: this.props.parentPlayerName,\n//       currPlayerPos: this.props.parentPlayerPos});\n//       addPlayer(this.props.parentPlayerName, this.props.parentPlayerPos);\n//     }\n//   }\n\n//   //check for: player already in the lineup, available positions\n//   //once checks are completed, how to communicate with the right circles? how to loop thru the circles?\n//   addPlayer(name, pos) {\n//     let newPos = \"\";\n//     if(pos == 'GK') newPos = \"goalkeeper\";\n//     if(pos == 'D') newPos = 'defender';\n//     if(pos == 'M') newPos = 'midfielder';\n//     if(pos == 'F') newPos = 'forward';\n\n\n//   }\n\n//   // 1. check if player already, if so, don't do anything\n//   // 2. if not current player (else), and if positions are available, then add him to the 1st available circle \n//   // 3. must return adjusted budget if player is successfully added\n//   // MUST DO: figure out where to place add function. I need to access the filled property to determine if a circle can be occupied or if I must check the next\n//   // MUST DO: use position to check whether we should be calling into gk, def, mid, or forward\n//   render() {\n//     const gkRef = useRef();\n//     const dRef = useRef();\n//     const mRef = useRef();\n//     const fRef = useRef();\n\n//     return(\n//         <div className=\"field\">\n          \n//           <div className=\"gk-flex flex-box\">\n//             <Circle ref={gkRef} onClick={console.log(\"hello bitch\")} classNames=\"circle goalkeeper\" \n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//           </div>\n\n//           <div className=\"defense flex-box\">\n//             <Circle classNames=\"circle defender\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle defender\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle defender\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//           </div>\n\n//           <div className=\"midfield flex-box\">\n//             <Circle classNames=\"circle midfielder\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle midfielder\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle midfielder\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle midfielder\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//           </div>\n\n//           <div className=\"offense flex-box\">\n//             <Circle classNames=\"circle forward\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle forward\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//             <Circle classNames=\"circle forward\"\n//             parentData = {this.state.jerseyColor}\n//             ></Circle>\n//           </div>\n\n//         </div>\n//     );\n//   }\n// }\n\nconst Circle = (props) => {\n  const [jerseyColor, setJerseyColor] = useState(props.parentData);\n  const [filled, setFilled] = useState(false);\n  const [playerName, setPlayerName] = useState(\"\");\n\n  useEffect(() => {\n    setJerseyColor(props.parentData);\n  }, props.parentData);\n\n  useEffect(() => {\n    \n  });\n\n  const thisRef = useRef();\n  return(\n    <div>\n      <div\n      ref = {thisRef} \n      className={props.classNames}\n      style={{ backgroundColor: jerseyColor }}\n      onClick={() => console.log(thisRef)}\n      ></div>\n      <span className=\"circleText\">{playerName}</span>\n    </div>\n  );\n}\n\n// class Circle extends Component {\n//   constructor(props){\n//     super(props);\n\n//     this.state = {\n//       jerseyColor: this.props.parentData,\n//       filled: false,\n//       playerName: \"\"\n//     };\n//   }\n\n//   addPlayer = (name, pos) => {\n//     if(!this.state.filled){\n//       this.setState({filled: true,\n//       playerName: name});\n//     }\n//   }\n\n//   //also check for playerName and playerPos change (just check for filled)\n//   componentDidUpdate(prevProps){\n//     if(this.props.parentData !== prevProps.parentData) {\n//       this.setState({jerseyColor: this.props.parentData});\n//     }\n\n//     if(this.props.parentDataFilled != prevProps.parentDataFilled){\n//       this.setState({filled: false});\n//       //set the state of the playername and playerPos as well\n//     }\n//   }\n\n//   render() {\n//     const thisRef = useRef();\n\n//     return(\n//       <div>\n//         <div\n//         ref = {thisRef} \n//         className={this.props.classNames}\n//         style={{ backgroundColor: this.state.jerseyColor }}\n//         onClick={() => console.log(\"hello this is the circle I'm clicking..\")}\n//         ></div>\n//         <span className=\"circleText\">{this.state.playerName}</span>\n//       </div>\n//     );\n//   }\n// }\n\n//TODO: where should the increment() go?\nclass PlayersSelected extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      playersOnTeam: 0,\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"players-selected\">\n        Players selected: {this.state.playersOnTeam}/11\n        </div>\n    );\n  }\n}\n\nclass Budget extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      budget: 100,\n    }\n\n  }\n\n  // TODO: componentDidUpdate()\n\n  render() {\n    return(\n      <div className=\"budget\" onChange={() => this.props.parentCallback(this.state.budget)}>\n        Budget: {this.state.budget}m\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}